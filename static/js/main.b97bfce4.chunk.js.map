{"version":3,"sources":["assets/Helper.js","comps/Weather.js","comps/WeatherNavbar.js","comps/Weathercard.js","comps/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["ConvertTime","time","date","Date","getHours","getMinutes","substr","isDay","_sunset","nowDate","IconSelector","main","sunset","defaults","WeatherDetailsWrapper","styled","div","Detail","SmallLabel","h4","color","weight","fontSize","align","firstToUpperCase","Weather","props","minmaxTemp","min","max","type","style","items","className","city","name","country","toDateString","icon","list","weather","size","animate","float","temp","description","temp_min","temp_max","humidity","feels_like","sunrise","WeatherNavbar","paddingTop","onSubmit","e","onSubmitCity","onChange","onChangeCity","target","value","autoComplete","placeholder","Weathercard","index","indexOf","substring","item","this","dt","getDateCard","dt_txt","React","Component","ForecastWrapper","Carousel","useState","activeItemIndex","setIndex","placeholderItem","margin","height","background","enablePlaceholder","numberOfPlaceholderItems","numberOfCards","window","innerWidth","gutter","slidesToScroll","chevronWidth","outsideChevron","showSlither","firstAndLastGutter","requestToChangeActive","rightChevron","leftChevron","map","_item","i","key","App","state","cityName","isLoaded","HandleChangeCity","bind","setState","fetchData","fetch","then","response","json","data","catch","error","alert","preventDefault","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b97bfce4.chunk.js","sourcesContent":["export function ConvertTime (time)   {\r\n    let unix_timestamp = time;\r\n    // Create a new JavaScript Date object based on the timestamp\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    var date = new Date(unix_timestamp * 1000);\r\n    // Hours part from the timestamp\r\n    var hours = date.getHours();\r\n    // Minutes part from the timestamp\r\n    var minutes = \"0\" + date.getMinutes();\r\n\r\n\r\n    // Will display time in 10:30 format\r\n    var formattedTime = hours + ':' + minutes.substr(-2) ;\r\n\r\n    return formattedTime;\r\n}\r\n\r\nexport function isDay(_sunset){\r\n    var nowDate =  new Date();\r\n    let sunset = ConvertTime(_sunset);\r\n    let time = nowDate.getHours() +':'+ nowDate.getMinutes();\r\n\r\n    if(sunset>time)\r\n        return true;\r\n    return false;\r\n    \r\n}\r\nexport function IconSelector(main,sunset) {    \r\n    let weatherIcon = null;\r\n\r\n    if (main === 'Thunderstorm') {\r\n    weatherIcon = 'RAIN';\r\n    } else if (main === 'Drizzle') {\r\n    weatherIcon = 'RAIN';\r\n    } else if (main === 'Rain') {\r\n    weatherIcon = 'RAIN'\r\n    } else if (main === 'Snow') {\r\n    weatherIcon = 'SNOW'\r\n    } else if (main === 'Clear') {\r\n        if(isDay(sunset)) {       \r\n            weatherIcon = 'CLEAR_DAY';\r\n            \r\n        }\r\n        else{\r\n            weatherIcon = 'CLEAR_NIGHT'\r\n\r\n        }    \r\n    } else if (main === 'Clouds') {\r\n             weatherIcon = 'CLOUDY';\r\n    } else {\r\n    weatherIcon ='FOG';\r\n    }\r\n    return weatherIcon;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\nimport {IconSelector,ConvertTime} from '../assets/Helper';\r\n\r\nconst defaults = {\r\n    icon: 'CLEAR_DAY',\r\n    color: 'white',\r\n    size: 160,\r\n    animate: true\r\n};\r\n\r\n\r\nconst WeatherDetailsWrapper = styled.div`\r\n  \r\n  float:center;\r\n  flex-basis: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 10px 0;\r\n \r\n  margin: 0 0;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  border-radius: 10px;\r\n  align-self: flex-start;\r\n\r\n`;\r\n\r\nconst Detail = styled.div`\r\nflex-basis: calc(100% / 3);\r\npadding: 10px;\r\nfont-size:20px;\r\n`\r\n\r\n\r\nconst SmallLabel = styled.h4`\r\n  flex:auto;\r\n  color: ${({ color }) => color || '#FFFFFF'};\r\n  display: block;\r\n  font-weight: ${({ weight }) => weight || '600'};\r\n  font-size: ${({ fontSize }) => fontSize || '15px'};\r\n  text-align: ${({ align }) => align || 'left'};\r\n  padding: 5px 0;\r\n  ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n  &:first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n  `}\r\n\r\n`;\r\n\r\nconst Weather =  (props)=>{\r\n\r\n    const minmaxTemp = (min,max,type)=>{\r\n    \r\n        if (type === 'sunrise') {\r\n            return (\r\n                <Detail >\r\n                    <div>Sunrise</div>\r\n                    <div>{ConvertTime(min)}</div>\r\n                    <br/>\r\n                    <div>Sunset</div>\r\n                    <div>{ConvertTime(max)}</div>\r\n                </Detail>\r\n            )\r\n        }\r\n        else if (type==='temp'){\r\n            return (\r\n                <Detail style={{fontSize:'20px'}}>\r\n                    <div>High</div>\r\n                    <div>{max}&deg;</div>\r\n                    <br/>\r\n                    <div>Low</div>\r\n                    <div>{min}&deg;</div>\r\n                    \r\n\r\n                </Detail>\r\n            )\r\n        }if(type==='huimidity'){\r\n            return(\r\n                <Detail>\r\n                    <div >Humidity</div>\r\n                    <div>{min}<span>&#37;</span></div>\r\n                    <br></br>\r\n                    <div > Feels like</div>\r\n                    <div>{max}&deg;</div>\r\n                </Detail>   \r\n            )\r\n        }\r\n        \r\n    }\r\n    var date = new Date();\r\n     \r\n    const {items} = props;\r\n\r\n\r\n\r\n    return (\r\n    \r\n            <div className=\"container textColor\"> \r\n                <div className=\" cards py-4\">\r\n                    <h3 >{items.city.name}, {items.city.country}</h3>\r\n                    <h3 className=\"date\">{date.toDateString()}</h3>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div  className=\"row\">\r\n                        <div  className=\"col-md-6 tempcontainer\">\r\n                            <ReactAnimatedWeather\r\n                            icon={IconSelector(items.list[0].weather[0].main)}\r\n                            color={defaults.color}\r\n                            size={defaults.size}\r\n                            animate={defaults.animate}\r\n                                \r\n                            />\r\n\r\n                            \r\n                            <div className=\"col-6\" style={{ float:'right' }}>    \r\n                               \r\n                                <span style={{fontSize:'60px'}}>{items.list[0].main.temp}&deg;</span>\r\n                                <br/> \r\n                                <p style={{fontSize:'30px'}}>{items.list[0].weather[0].description}</p>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"col-md-1\" style={{borderLeft:'2px solid white',width:0,height:'130px',padding:0}}></div> */}\r\n                        <div  className=\"col-md-6 wrapper\">\r\n                        <WeatherDetailsWrapper  >\r\n                            <SmallLabel  align=\"center\" weight=\"400\">\r\n                                <div >{minmaxTemp(items.list[0].main.temp_min,items.list[0].main.temp_max,'temp')}</div>\r\n                            </SmallLabel>\r\n                            <SmallLabel  align=\"center\" weight=\"400\">\r\n                                <div >{minmaxTemp(items.list[0].main.humidity,items.list[0].main.feels_like,'huimidity')}</div>\r\n                            </SmallLabel>\r\n                            <SmallLabel align=\"center\" weight=\"400\">\r\n                                <div>{minmaxTemp(items.city.sunrise,items.city.sunset,'sunrise')}</div>\r\n                            </SmallLabel>\r\n                        </WeatherDetailsWrapper> \r\n                        </div>   \r\n                    </div>                   \r\n                </div>          \r\n            </div>\r\n      \r\n    );\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst WeatherNavbar = (props) => {\r\n    return(\r\n        <div style={{paddingTop:'40px'}} className='container'>\r\n            <div  className=\"row \">\r\n                <div className='col-md-6 textColor'>\r\n                    <h1>WEATHER INDEX</h1>\r\n                </div>\r\n                <div className=' col-md-2'>\r\n                    <form onSubmit = {(e) => props.onSubmitCity(e)}>\r\n                       \r\n                        \r\n                        <input \r\n                            onChange = {(e)=>props.onChangeCity(e.target.value)}\r\n                            className = 'inputcity form-control '\r\n                            type = 'search'\r\n                            autoComplete = 'off'\r\n                            name = 'city'\r\n                            placeholder='Enter city...'\r\n                            \r\n                        />\r\n                        \r\n                 \r\n                         \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default WeatherNavbar;","import  React from 'react';\r\nimport {IconSelector,ConvertTime} from '../assets/Helper';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\nconst defaults = {\r\n  icon: 'CLEAR_DAY',\r\n  color: 'white',\r\n  size: 30,\r\n  animate: false\r\n};\r\n\r\nexport class Weathercard extends React.Component{\r\n  getDateCard(date){\r\n    let index = date.indexOf('-');\r\n    let result = date.substring(index+1,date.indexOf(' '));\r\n\r\n    return result;\r\n\r\n  }\r\n  render() {\r\n    const { item } = this.props;\r\n    \r\n    return (\r\n      <div className='container'>\r\n        \r\n            <div >\r\n              {ConvertTime(item.dt)}\r\n              <br></br>\r\n              <span>{this.getDateCard(item.dt_txt)}</span>\r\n            </div>\r\n            <br></br>\r\n            <div >\r\n            \r\n            <ReactAnimatedWeather\r\n              icon={IconSelector(item.weather[0].main)}\r\n              color={defaults.color}\r\n              size={defaults.size}\r\n              animate={defaults.animate}\r\n                            \r\n            />\r\n            </div>\r\n            {item.main.temp}&deg;\r\n            <div>\r\n               \r\n            </div>\r\n\r\n        </div>\r\n       \r\n     \r\n    );\r\n  }\r\n}","import React, {useState} from 'react';\r\n\r\n\r\nimport styled from 'styled-components';\r\nimport ItemsCarousel from 'react-items-carousel';\r\nimport { Weathercard } from './Weathercard';\r\n\r\n\r\n\r\n  const ForecastWrapper = styled.div`\r\n  vertical-align: middle;\r\n  text-align:center;\r\n  flex-shrink: 0;\r\n  flex-basis: 90px;\r\n  padding: 10px;\r\n  margin: 0 5px;\r\n  border-radius: 5px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  &:first-child {\r\n    margin-left: 0;\r\n  }\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n\r\n`;\r\n\r\nconst Carousel = (props) => {\r\n    const {items } = props;\r\n\r\n    const [activeItemIndex, setIndex] = useState(0);\r\n\r\n    return (\r\n        <div  className='container forcast'>\r\n          <h3>Forecast</h3>\r\n          \r\n        <ItemsCarousel\r\n          placeholderItem={<div style={{ margin:0,height: 200, background: '#EEE' }} />}\r\n          enablePlaceholder={true}\r\n          numberOfPlaceholderItems={5}\r\n          numberOfCards={(window.innerWidth <1000) ? 3 : 9}   // for responsive page \r\n          gutter={12}\r\n          slidesToScroll={5}\r\n          chevronWidth={60}\r\n          outsideChevron={true}\r\n          showSlither={false}\r\n          firstAndLastGutter={false}\r\n          activeItemIndex={activeItemIndex}\r\n          requestToChangeActive={value => setIndex( value )}\r\n          rightChevron={<button  className=\"btn btn-light btn-circle btn-sm\">{'>'}</button>}\r\n          leftChevron={<button  className=\"btn btn-light btn-circle btn-sm\">{'<'}</button>}\r\n        >\r\n          {items.list.map((_item, i) =>\r\n          <div key={i} >\r\n          <ForecastWrapper>\r\n            <Weathercard  item={_item}></Weathercard>           \r\n          </ForecastWrapper>\r\n          </div>\r\n          )}\r\n\r\n\r\n          \r\n        </ItemsCarousel>\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Carousel;","import React from \"react\";\n\n\nimport './App.css';\nimport Weather from \"./comps/Weather\";\nimport WeatherNavbar from \"./comps/WeatherNavbar\";\n\nimport Carousel from './comps/Carousel';\n\nimport {isDay} from './assets/Helper';\n\n\n\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { \n      cityName:'tel-aviv',\n      items:[],\n      isLoaded:false,\n      activeItemIndex:0,\n      isDay:false\n    };\n\n    this.HandleChangeCity = this.HandleChangeCity.bind(this);\n    this.onSubmitCity = this.onSubmitCity.bind(this);\n  }\n\n\n  HandleChangeCity(value){\n    \n    this.setState({cityName:value });\n  }\n\n  componentDidMount(){\n        \n\n    const { cityName }  = this.state;\n\n    \n    this.fetchData(cityName);\n\n\n  \n  }\n\n  fetchData(city){\n   \n    const url ='http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&appid=46c1e6fa7b5aec3308330d2ba434f560&units=metric&time=utc';\n    \n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      \n      this.setState({\n        cityName:city,\n        items:data,\n        isLoaded:true\n\n      })\n      \n      if(isDay(data.city.sunset)){\n         this.setState({isDay:true})\n      }\n      \n    })\n    .catch(error => alert('incorrect city entering', error))\n  }\n\n\n  onSubmitCity(e){\n    e.preventDefault();\n   \n    this.fetchData(this.state.cityName);\n  }\n\n\n\n\n\n\n  render(){\n    \n    const { isLoaded, items } = this.state;\n    \n    \n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div>\n\n        \n        <WeatherNavbar \n          onChangeCity = {this.HandleChangeCity}\n          onSubmitCity = {this.onSubmitCity}\n        />\n        \n        <Weather \n          items = {items}          \n        />\n        <br/>\n        <Carousel\n          items = {items}\n        />\n      </div>\n\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}